{"version":3,"sources":["components/balance/balance.js","components/header/header.js","components/header/header-logo.js","components/table/table.js","App.js","serviceWorker.js","index.js"],"names":["Balance","className","Component","HEADER_LIST","Header","map","item","href","onClick","HeaderLogo","title","src","alt","TABLE_LIST","image","description","date","Table","state","table","this","cellPadding","Categories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAGqBA,G,6KAEjB,OACE,yBAAKC,UAAU,+BACb,wBAAIA,UAAU,qCAAd,WACA,yBAAKA,UAAU,mCAAf,aACA,4BAAQA,UAAU,sCAAlB,iB,GAN6BC,cCA/BC,G,KAAc,CAAC,OAAQ,SAAU,eA4BxBC,EAZA,WACb,OACI,yBAAKH,UAAU,cACZE,EAAYE,KAAI,SAACC,GAAD,OACf,uBAAGC,KAAK,KAAKC,QAAS,GAAIP,UAAU,eACjCK,QCTEG,EAVI,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpB,OAEE,yBAAKT,UAAU,gBACb,yBAAKU,IANE,iBAMSC,IAAI,OAAOX,UAAS,SACpC,wBAAIA,UAAU,sBAAsBS,KCApCG,G,MAAa,CACjB,CACEH,MAAO,OACPI,MAVS,mBAWTC,YAAa,kBACbC,KAAM,cAER,CACEN,MAAO,UACPI,MAfY,mBAgBZC,YAAa,GACbC,KAAM,IAER,CACEN,MAAO,QACPI,MApBe,iBAqBfC,YAAa,GACbC,KAAM,IAER,CACEN,MAAO,gBACPI,MAzBS,iBA0BTC,YAAa,GACbC,KAAM,IAER,CACEN,MAAO,OACPI,MA9BS,mBA+BTC,YAAa,GACbC,KAAM,MAIWC,E,4MACnBC,MAAQ,CACNC,MAAON,G,uDAEC,IACAM,EAAUC,KAAKF,MAAfC,MACR,OACE,oCACE,wBAAIlB,UAAU,6BAAd,cACA,2BAAOA,UAAU,4BAA4BoB,YAAY,MACvD,2BAAOpB,UAAU,kCACf,4BACE,wCACA,2CACA,oCACA,wCAGJ,+BACGkB,EAAMd,KAAI,SAACC,GACV,OACE,4BACE,4BACE,yBACEK,IAAKL,EAAKQ,MACVF,IAAI,OACJX,UAAU,eAEXK,EAAKI,OAER,4BAAKJ,EAAKS,aACV,4BAAKT,EAAKU,MACV,4BAAQf,UAAU,oCAChB,yBAAKU,IApEP,sBAoEuBC,IAAI,0B,GAjCVV,aCrCdoB,E,uKAEjB,OACE,6BACE,yBAAKrB,UAAU,oBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAYS,MAAM,iBAClB,kBAAC,EAAD,QAGJ,yBAAKT,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAb4BC,aCMpBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee08dadd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./balance.css\";\r\n\r\nexport default class Balance extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"categories-content__balance\">\r\n        <h2 className=\"categories-content__balance-title\">Balance</h2>\r\n        <div className=\"categories-content__balance-sum\">$2,652.07</div>\r\n        <button className=\"categories-content__balance-button\">Add more</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst HEADER_LIST = [\"Home\", \"Charts\", \"Categories\"];\r\n\r\n// const Header = () => {\r\n//   return (\r\n//     <ul className=\"header-list\">\r\n//       <li>\r\n//         <a href=\"#\" onClick={\"\"} className=\"header-link\">\r\n//           {HEADER_LIST.map((item) => (\r\n//             <li>{item}</li>\r\n//           ))}\r\n//         </a>\r\n//       </li>\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\nconst Header = () => {\r\n  return (\r\n      <div className=\"header-nav\">\r\n        {HEADER_LIST.map((item) => (\r\n          <a href=\"/#\" onClick={\"\"} className=\"header-link\">\r\n            {item}\r\n          </a>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst LOGO = \"./img/logo.svg\";\r\n\r\nconst HeaderLogo = ({ title }) => {\r\n  return (\r\n  \r\n    <div className=\"header__logo\">\r\n      <img src={LOGO} alt=\"logo\" className={`logo`} />\r\n      <h1 className=\"header-logo__title\">{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderLogo;","import React, { Component } from \"react\";\r\nimport \"./table.css\";\r\n\r\nconst FOOD = \"./img/burger.svg\";\r\nconst CLOTHES = \"./img/closet.svg\";\r\nconst RESTAURANT = \"./img/wine.svg\";\r\nconst BILL = \"./img/bill.svg\";\r\nconst PETS = \"./img/animal.svg\";\r\nconst TABLE_BTN = \"./img/table-btn.svg\";\r\n\r\nconst TABLE_LIST = [\r\n  {\r\n    title: \"Food\",\r\n    image: FOOD,\r\n    description: \"For all my food\",\r\n    date: \"12/09/2020\",\r\n  },\r\n  {\r\n    title: \"Clothes\",\r\n    image: CLOTHES,\r\n    description: \"\",\r\n    date: \"\",\r\n  },\r\n  {\r\n    title: \"Title\",\r\n    image: RESTAURANT,\r\n    description: \"\",\r\n    date: \"\",\r\n  },\r\n  {\r\n    title: \"Utility bills\",\r\n    image: BILL,\r\n    description: \"\",\r\n    date: \"\",\r\n  },\r\n  {\r\n    title: \"Pets\",\r\n    image: PETS,\r\n    description: \"\",\r\n    date: \"\",\r\n  },\r\n];\r\n\r\nexport default class Table extends Component {\r\n  state = {\r\n    table: TABLE_LIST,\r\n  };\r\n  render() {\r\n    const { table } = this.state;\r\n    return (\r\n      <>\r\n        <h3 className=\"categories-content__title\">Categories</h3>\r\n        <table className=\"categories-content__table\" cellPadding=\"50\">\r\n          <thead className=\"categories-content__table-head\">\r\n            <tr>\r\n              <th>Category</th>\r\n              <th>Description</th>\r\n              <th>Date</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {table.map((item) => {\r\n              return (\r\n                <tr>\r\n                  <td>\r\n                    <img\r\n                      src={item.image}\r\n                      alt=\"food\"\r\n                      className=\"table-icon\"\r\n                    ></img>\r\n                    {item.title}\r\n                  </td>\r\n                  <td>{item.description}</td>\r\n                  <td>{item.date}</td>\r\n                  <button className=\"categories-content__table-button\">\r\n                    <img src={TABLE_BTN} alt=\"table-btn\"></img>\r\n                  </button>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Balance from \"./components/balance/balance\";\nimport Header from \"./components/header/header\";\nimport HeaderLogo from \"./components/header/header-logo\";\nimport Table from \"./components/table/table\";\n\nexport default class Categories extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"categories-inner\">\n          <div className=\"header\">\n            <div className=\"container\">\n              <HeaderLogo title=\"MoneyTracker\" />\n              <Header />\n            </div>\n          </div>\n          <div className=\"categories-content\">\n            <Balance />\n            <Table />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}